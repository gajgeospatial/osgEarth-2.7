#pragma once
// Copyright (c) 2014-2015 GAJ Geospatial Enterprises, Orlando FL
// This file is based on the Common Database (CDB) Specification for USSOCOM
// Version 3.0 – October 2008

// CDB_Tile is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// CDB_Tile is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.

// You should have received a copy of the GNU Lesser General Public License
// along with CDB_Tile.  If not, see <http://www.gnu.org/licenses/>.

// 2015 GAJ Geospatial Enterprises, Orlando FL
// Modified for General Incorporation of Common Database (CDB) support within osgEarth
//
#include <sstream>
#include <iomanip>
#include <vector>
#include <osgEarth/TileSource>
#include <gdal_priv.h>
#include <ogr_spatialref.h>

using namespace std;

#ifdef _MSC_VER
#if _MSC_VER < 1800
#define round osg::round
#endif
#endif

//This is based on the global profile in CDBTileSource
#define MAXNLODNUM 5

struct coord2d
{
	double	Xpos;
	double	Ypos;
	coord2d() : Xpos(0.0), Ypos(0.0)
	{
	}
	coord2d(double x, double y) : Xpos(x), Ypos(y)
	{
	}
};
typedef vector<coord2d> coord2dV;

typedef enum
{
	None = 0,
	Partial = 1,
	Full = 2,
	NotSet = 3,
}Image_Contrib;

typedef enum
{
	Imagery = 0,
	Elevation = 1,
	ImageryCache = 2,
	ElevationCache = 3,
	CDB_Unknown = 11,
}CDB_Tile_Type;

typedef enum
{
	Created = 0,
	Opened = 1,
	Loaded = 2
}CDB_Tile_Status;

struct CDB_Tile_Pixels
{
	int		pixX;
	int		pixY;
	int		bands;
	GDALDataType pixType;
	coord2d degPerPix;
	CDB_Tile_Pixels() : pixX(1024), pixY(1024), bands(3), pixType(GDT_Byte)
	{
	}
};

struct CDB_GDAL_Access
{
	GDALDataset *		poDataset;
	GDALRasterBand *	RedBand;
	GDALRasterBand *	GreenBand;
	GDALRasterBand *	BlueBand;
	GDALDriver *		poDriver;
	double				adfGeoTransform[6];
	unsigned char *		reddata;
	unsigned char *		greendata;
	unsigned char *		bluedata;
	float *				elevationdata;
	CDB_GDAL_Access() : poDataset(NULL), RedBand(NULL), GreenBand(NULL), BlueBand(NULL), reddata(NULL),
		greendata(NULL), bluedata(NULL), elevationdata(NULL), poDriver(NULL)
	{
	}
};

struct CDB_GDAL_Drivers
{
	bool			cdb_drivers_initialized;
	GDALDriver *	cdb_JP2Driver;
	GDALDriver *	cdb_GTIFFDriver;
	GDALDriver *	cdb_HFADriver;
	CDB_GDAL_Drivers() : cdb_drivers_initialized(false), cdb_JP2Driver(NULL), cdb_GTIFFDriver(NULL), cdb_HFADriver(NULL)
	{
	}
};

struct CDB_Tile_Extent
{
	double	North;
	double	South;
	double	East;
	double	West;
	CDB_Tile_Extent() : North(0.0), South(0.0), East(0.0), West(0.0)
	{
	}
	CDB_Tile_Extent(double n, double s, double e, double w) : North(n), South(s), East(e), West(w)
	{
	}

};

typedef CDB_Tile_Extent * CDB_Tile_ExtentP;
typedef vector<CDB_Tile_ExtentP> CDB_Tile_ExtentPV;

class CDB_Tile;
typedef CDB_Tile * CDB_TileP;
typedef vector<CDB_TileP> CDB_TilePV;

class CDB_Tile
{
public:
	CDB_Tile(std::string cdbRootDir, std::string cdbCacheDir, CDB_Tile_Type TileType, CDB_Tile_Extent *TileExtent, int NLod=0);

	virtual ~CDB_Tile();

	std::string FileName(void);

	int CDB_LOD_Num(void);

	bool Build_Cache_Tile(bool save_cache);

	bool Build_Earth_Tile(void);

	bool Tile_Exists(void);

	double West(void);

	double East(void);

	double North(void);

	double South(void);

	bool Load_Tile(void);

	coord2d LL2Pix(coord2d LLPoint);

	bool Get_Image_Pixel(coord2d ImPix, unsigned char &RedPix, unsigned char &GreenPix, unsigned char &BluePix);

	bool Get_Elevation_Pixel(coord2d ImPix, float &ElevationPix);

	void Free_Resources(void);

	osg::Image* Image_From_Tile(void);

	osg::HeightField* HeightField_From_Tile(void);

	static double Get_Lon_Step(double Latitude);

	static bool Initialize_Tile_Drivers(std::string &ErrorMsg);
private:
	std::string			m_cdbRootDir;
	std::string			m_cdbCacheDir;
	CDB_Tile_Extent		m_TileExtent;
	Image_Contrib		m_ImageContent_Status;
	CDB_Tile_Status		m_Tile_Status;
	std::string			m_FileName;
	std::string			m_LayerName;
	CDB_Tile_Type		m_TileType;
	bool				m_FileExists;
	CDB_Tile_Pixels		m_Pixels;
	int					m_CDB_LOD_Num;
	CDB_GDAL_Access		m_GDAL;


	int GetPathComponents(std::string& lat_str, std::string& lon_str, std::string& lod_str,
						  std::string& uref_str, std::string& rref_str);

	void Allocate_Buffers(void);

	void Free_Buffers(void);

	void Close_Dataset(void);

	bool Open_Tile(void);

	bool Read(void);

	bool Save(void);

	bool Write(void);

	void Fill_Tile(void);

	Image_Contrib Get_Contribution(CDB_Tile_Extent &TileExtent);

	Image_Contrib Image_Is_Inside_Tile(CDB_Tile_Extent &TileExtent);

	bool Point_is_Inside_Tile(coord2d &Point, CDB_Tile_Extent &TileExtent);

	void Build_From_Tiles(CDB_TilePV *Tiles, bool from_scratch = false);


};

