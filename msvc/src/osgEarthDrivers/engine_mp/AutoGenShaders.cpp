// ***DO NOT EDIT THIS FILE - IT IS AUTOMATICALLY GENERATED BY CMAKE***

#include <osgEarthDrivers/engine_mp/MPShaders>

#define MULTILINE(...) #__VA_ARGS__

using namespace osgEarth::Drivers::MPTerrainEngine;

Shaders::Shaders()
{
    VertexModel = "MPEngine.vert.model.glsl";
    _sources[VertexModel] = OE_MULTILINE($__HASHTAG__version $GLSL_VERSION_STR\n
$GLSL_DEFAULT_PRECISION_FLOAT\n
\n
$__HASHTAG__pragma vp_entryPoint "oe_mp_vertModel"\n
$__HASHTAG__pragma vp_location   "vertex_model"\n
$__HASHTAG__pragma vp_order      "-FLT_MAX"\n
\n
varying vec4 oe_layer_texc;\n
varying vec4 oe_layer_tilec;\n
\n
void oe_mp_vertModel(inout vec4 vertexModel)\n
{\n
    oe_layer_texc  = gl_MultiTexCoord$MP_PRIMARY_UNIT;\n
    oe_layer_tilec = gl_MultiTexCoord$MP_SECONDARY_UNIT;\n
}\n
\n
);

    VertexView = "MPEngine.vert.view.glsl";
    _sources[VertexView] = OE_MULTILINE($__HASHTAG__version $GLSL_VERSION_STR\n
$GLSL_DEFAULT_PRECISION_FLOAT\n
\n
$__HASHTAG__pragma vp_entryPoint "oe_mp_vertView"\n
$__HASHTAG__pragma vp_location   "vertex_view"\n
$__HASHTAG__pragma vp_order      "0.5"\n
\n
uniform float oe_layer_minRange;\n
uniform float oe_layer_maxRange;\n
uniform float oe_layer_attenuationRange;\n
\n
varying float oe_layer_rangeOpacity;\n
\n
void oe_mp_vertView(inout vec4 vertexView)\n
{\n
    float range = -vertexView.z;\n
\n
    float attenMin    = oe_layer_minRange - oe_layer_attenuationRange;\n
    float attenMax    = oe_layer_maxRange + oe_layer_attenuationRange;\n
\n
    oe_layer_rangeOpacity =\n
        oe_layer_minRange >= oe_layer_maxRange                   ? 1.0 :\n
        range >= oe_layer_minRange && range < oe_layer_maxRange  ? 1.0 :\n
        range < oe_layer_minRange                                ? clamp((range-attenMin)/oe_layer_attenuationRange, 0.0, 1.0) :\n
        range > oe_layer_maxRange                                ? clamp((attenMax-range)/oe_layer_attenuationRange, 0.0, 1.0) :\n
        0.0;\n
}\n
\n
);

    Fragment = "MPEngine.frag.glsl";
    _sources[Fragment] = OE_MULTILINE($__HASHTAG__version $GLSL_VERSION_STR\n
$GLSL_DEFAULT_PRECISION_FLOAT\n
\n
$__HASHTAG__pragma vp_entryPoint "oe_mp_apply_coloring"\n
$__HASHTAG__pragma vp_location   "fragment_coloring"\n
$__HASHTAG__pragma vp_order      "0.5"\n
$__HASHTAG__pragma vp_define     "MP_USE_BLENDING"\n
\n
uniform bool oe_isPickCamera;\n
uniform vec4 oe_terrain_color;\n
uniform sampler2D oe_layer_tex;\n
uniform int oe_layer_uid;\n
uniform int oe_layer_order;\n
uniform float oe_layer_opacity;\n
\n
varying vec4 oe_layer_texc;\n
varying float oe_layer_rangeOpacity;\n
\n
void oe_mp_apply_coloring(inout vec4 color)\n
{\n
    color = oe_terrain_color.a >= 0.0 ? oe_terrain_color : color;\n
\n
    float applyImagery = oe_layer_uid >= 0 ? 1.0 : 0.0;\n
    vec4 texel = mix(color, texture2D(oe_layer_tex, oe_layer_texc.st), applyImagery);\n
    texel.a = mix(texel.a, texel.a*oe_layer_opacity*oe_layer_rangeOpacity, applyImagery);\n
\n
$__HASHTAG__ifdef MP_USE_BLENDING\n
    float firstLayer = oe_layer_order == 0 ? 1.0 : 0.0;\n
    color = mix(texel, texel*texel.a + color*(1.0-texel.a), firstLayer);    \n
$__HASHTAG__else\n
    color = texel;\n
$__HASHTAG__endif\n
\n
    // disable primary coloring for pick cameras.\n
    float pick = oe_isPickCamera ? 1.0 : 0.0;\n
    color = mix(color, vec4(0), pick);\n
}\n
\n
);
}
